Real-Time Scheduling Policies
    two real-time scheduling policies : SCHED_FIFO and SCHED_RR
    * not real-time scheduling policies : SCHED_NORMAL
    real-time process들은 CFS에 의해 관리되어지지 않고 special real-time scheduler에 의해 관리된다.

    SCHED_FIFO : 
        first in first out
        runnable한 SCHED_FIFO task는 항상 SCHED_NORMAL task보다 먼저 실행된다.
        SCHED_FIFO task는 block되거나 processor를 명시적으로 yield하기 전까지 실행된다.
            -> timeslice가 없고 무한정으로 실행될 수 있다.
        더 높은 priority를 가지는 SCHED_FIFO, SCHED_RR만이 SCHED_FIFO를 preept할 수 있다.
        같은 priority의 SCHED_FIFO는 round-robin으로 실행되지만 명시적으로 processor를 양보하려고 할 때만 양보할 수 있다.
        따라서 SCHED_FIFO task가 unrunnable 되기 전까지는 해당 task보다 priority가 낮은 task는 실행될 수 없다.

    SCHED_RR :
        SCHED_FIFO와 같으나 timeslice를 다 소모할 때까지만 실행된다.
            -> SCHED_RR is SCHED_FIFO with timeslice.
        timeslice는 같은 priority를 가지는 process들을 rescheduling할 때만 쓰인다.
        priority가 낮은 process가 절대 높은 priority의 process를 preemption할 수 없는 SCHED_FIFO와 같이
        SCHED_RR 또한 priority가 낮은 process가 절대 preempt를 할 수 없다( timeslice를 다 소모하였다고 하더라도 ).

    SCHED_RR, SCHED_FIFO 둘다 항상 lower-priority process를 preept하는 것을 확실하게 하기 위해 static한 priority를 부여한다. 

    Real-Time Scheduling Policies in Linux provide soft real-time behavior.
    soft real-time :
        application을 timing deadline안에 실행되도록 scheduling을 시도하지만 항상 이것을 만족하는지는 보장하지 않는다.
    hard real-time :
        certain limit 안에 어떠한 scheduling requirements이라도 만족할 수 있게 보장한다.

    Real-time priority range : 0 ~ (MAX_RT_PRIO - 1) (default MAX_RT_PRIO : 100)
    이 priority space는 SCHED_NORMAL task의 nice value와 함께 쓰인다.
        -> nice value range : MAX_RT_PRIO ~ (MAX_RT_PRIO + 40)
        -> -20 ~ 19 maps directly onto the priority space fromm 100 to 139
