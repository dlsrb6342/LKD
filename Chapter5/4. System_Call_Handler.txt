System Call Handler
    user-space application은 직접 kernel code를 실행시킬 수 없다.
    대신 어떻게 해서든 kernel에게 그들이 system call을 실행하고 kernel mode로 바뀌길 원한다고 알려야 한다.

    kernel에 알리는 mechanism은 software interrupt이다. 
    -> exception을 발생시킨다. -> system이 process를 kernel mode로 바꾸고 exception handler를 실행시킨다.
                                여기서의 exception handler는 system call handler이다.
    x86에서 software interrupt는 int $0x80 instruction을 통해 발생되는 interrupt number 128이다.
    system call handler는 system_call()이라는 함수이다.

    최근에 x86 processor에 sysenter 라는 feature가 추가되었다. 이 feature는 int $0x80보다 faster하고 
    more specialized하게 kernel에 trapping하는 방법이다.

    Denoting the Correct System Call
        모든 process가 같은 방법으로 kernel에 들어가고 system call은 많은 종류가 있기 때문에, 그저 그냥 kernel-space로
         들어가는 것은 충분하지 않다.
        그러므로 system call number가 kernel에게 전달되어야 한다.
        x86에서는 eax register에 system call number를 저장해서 kernel에게 전달한다.
        system call handler가 eax register를 읽어온다.

        system_call() 은 주어진 system call number와 NR_syscalls를 비교하여 NR_syscalls보다 크거나 같으면
         -ENOSYS를 return하고 작으면 system call을 실행한다.
            -> call *sys_call_table(, %rax, 8)
            * %rax의 lower 32bit가 %eax이다. 64bit machine의 예시이기 때문에 8(->8byte)
               32bit machine에서는 8을 4로 바꿔주면 된다.

    Parameter Passing
        system call이 parameter를 필요로 할 때도 있다. 이 때에는 system call number를 넘겨줬던 것처럼
         똑같이 register에 저장해서 넘겨주게 된다.
        32bit machine에서는 registger ebx, ecx, edx, esi, edi 5개의 registger에 argument를 저장한다.
        만약 parmeter의 갯수가 5개가 넘는다면 모든 parameter들을 가지고 있는 user-space를 가리키는 pointer를
         하나의 register에 담아 보낸다.