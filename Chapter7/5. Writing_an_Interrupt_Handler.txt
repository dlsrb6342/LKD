Writing an Interrupt Handler
    static irqreturn_t intr_handler(int irq, void *dev) :
        interrupt handler를 선언한 예시이다.
        이 함수의 argument들은 request_irq()에 전해지는 argument들이다.

        int irq :
            the numeric value of the interrupt line.

        void *dev :
            interrupt handler를 등록할 때에 request_irq()에 똑같이 전해지는 generic pointer이다.
            같은 interrupt handler를 사용하는 다양한 device들을 구분짓는 cookie로써의 역할을 한다.
            device structure가 unique하고 handler에서 쓰기 유용하기 때문에 dev 값으로 쓰인다.

        return irqreturn_t :
            special type irqreturn_t.
            can return two special values : IRQ_NONE, IRQ_HANDLED
            IRQ_NONE :
                interrupt handler에 등록된 device가 interrupt originator가 아닐 때의 return 값
            IRQ_HANDLED :
                interrupt handler가 잘 실행되고 등록된 device가 interrupt를 발생시켰을 때 return 값
            IRQ_RETVAL(val) :
                val이 0이 아닐때 IRQ_HANDLED
                0일 때 IRQ_NONE
            사실 이 irqreturn_t type은 int 이다. 하위 호환성을 제공하기 위해 이런 특별한 type을 사용한다.

        함수를 static으로 선언하는 이유는 다른 파일에서 이 함수를 직접 호출하는 경우는 없기 때문이다.

    * Reentrancy and Interrupt Handlers
        Linux의 interrupt handler는 reentrancy가 필요없다. interrupt handler가 실행되는 순간,
        interrupt line에 masked out되고 같은 interrput line으로 다른 interrupt가 오는것을 막는다.
        그러므로 같은 interrupt handler는 동시에 중첩된 interrupt를 handling하기 위해 실행되지 않는다.


Shared Handlers
    unshared handler와 비슷하게 등록되고 실행된다. unshared와 shared의 주된 차이점 3가지를 보겠다.
    1. request_irq()의 flags argument안에 IRQF_SHARED flag가 set되야한다.
    2. 각 handler의 dev argument는 무조건 unique해야 한다. shared handler에서는 dev에 NULL을 보낼 수 없다.
    3. interrupt handler는 자신의 device가 실제로 interrupt를 생성하고 있는지 구분할 수 있어야 한다.
        hardware의 support와 interrupt handler의 관련된 logic을 필요로 한다.
        hardware가 그 능력이 없다면 interrupt handler가 interrupt line을 공유하는 device들을 알아볼 길이 없다.

    interrupt를 공유하는 모든 driver들은 위의 requirement를 충족해야 한다. 
    IRQF_SHARED가 있는 request_irq()가 호출되었을 때, interrupt line이 현재 등록되어있지 않았거나 해당 라인에 
    등록된 모든 interrupt handler가 IRQF_SHARED로 되어있을 때만 성공적으로 끝난다.

    kernel이 interrupt를 받았을 때 kernel은 그 interrupt line에 등록된 handler를 실행시킨다.
    그러므로 handler가 자신의 device가 interrupt를 준 것인지 구분할 수 있어야 한다. 만약 자신의 device가 interrupt를
    발생시킨 것이 아니라면 빨리 handler를 끝내야 한다. 
    따라서 hardware device는 handler가 check할 수 있는 status를 가져야 한다.
