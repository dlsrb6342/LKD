Preemption Disabling
    kernel이 preemptive하기 때문에 kernel에 있는 process는 언제든 중지될 수 있다.
    preempt한 process와 preempt 당한 process가 같은 critical region에서 작동하게 될 수 있다.
    따라서 이를 막기 위해 kernel preemption code는 preempt되면 안되는 곳에서는 spin lock을 사용한다.
    spin lock을 잡으면 kernel은 preemption되지 않는다. kernel preemption과 SMP에서의 동시성 문제는 같기 때문에
    kernel이 이미 SMP-safe하다. 

    사실, 몇몇 상황에서는 spin lock은 필요없지만 kernel preemption disable은 필요할 때가 있다.
    대부분은 per-processor data일 때 위의 상황이다.

    shared data에 대해 보통, multiprocessor에서 concurrency를 막기 위해 spin lock이 필요하지만
     shared data가 per-processor data라면 lock은 필요없다.
    이를 해결하기 위해 preempt_disable(), preempt_enable()이 있다. 이 함수는 nestable해서 여러 번 호출될 수 있는데
    preempt_disable()이 호출된 횟수만큼 preempt_enable()도 호출되어야 한다.

    preempt_disable()이 몇 번 호출되었는지 숫자를 세는데 그 값이 0이면 kernel은 preemptive이고 0보다 크면 not preemptive이다.
    preempt_count()가 이 값을 return한다.

    int cpu;
    cpu = get_cpu()           /* disable kernel preemption and set "cpu" to the current processor */
    /* manipulate per-processor data */
    cpu = put_cpu()           /* enable kernel preemption and "cpu" is no longer valid */
