Bottom Halves
    여러가지 제한 때문에 interrupt handler에게는 first half만 하게 한다.
        1. interrupt handler는 asynchronously하게 실행되고 다른 코드(다른 interrupt handler 포함)를 interrupt한다.
            그렇기 때문에 interrupt된 code를 오래 놔두는 것을 피하기 위해 interrupt handler는 최대한 빨리 실행되어야 한다.
        2. interrupt handler는 현재 processor에 대해 현재 interrupt를 disable하거나, 
            모든 interrupt를 disable하고 실행된다. hardware가 OS와 통신하는 것을 막는 것이기 때문에 
            interrupt handler는 최대한 빨리 실행되어야 한다.
        3. interrupt handler는 hardware와의 작업이므로 보통 time-critical하다.
        4. interrupt handler는 process context가 아닌 interrupt context에서 실행된다.
            따라서 block이 될 수 없고 이것은 interrupt handler가 할 수 있는 일을 제한한다.

    interrupt handler는 hardware interrupt를 관리하는 solution의 아주 일부분만 담당해야 한다.
    OS는 hardware에 즉시 반응하고 어느 때나 time-critical한 action을 수행할 수 있게 
     빠르고, 비동기적이고, 간단한 mechanism을 요구한다.

    managing interrupt : interrupt handler(top halves) / bottom halves

    interrupt handler가 처리하지 않은 interrupt-related work를 하는 부분이다.
    사실, bottom half에서 어떤 일을 해야 하는지에 대한 규칙이 없다. 모두 device-driver를 작성한 사람에게 맡겨진다.

    tips for dividing work between the top and bottom half :
        1. work가 time-sensitive하면 interrupt handler에서 해라.
        2. hardware와 관련있는 일이라면 interrupt handler에서 해라.
        3. 다른 interrupt가 오면 안되는 작업이라면 interrupt handler에서 해라.
        4. 나머지 일들은 bottom half에서 하는 것을 고려해봐라.


Why Bottom Halves?
    interrupt handling간에는 다른 interrupt들을 disable한다.(IRQF_DISABLED이 set이든 unset이든)
    따라서 system의 반응과 성능을 위해 interrupt들이 disable되어있는 시간을 줄이는 것이 중요하다.

    when is "later?" -> not now
    어떤 특정 시점에 실행되는 것이 아니라 system이 덜 바쁘고 interrupt가 다시 enable되었을 때 실행한다.
    보통 interrupt가 return하고 바로 실행된다. 중요한 것은 모든 interrupt가 enable된 상태에서 실행된다는 것이다.


A World of Bottom Halves
    bottom half를 구현하는 방법은 여러 가지가 있다.
    이 chapter에서는 2.6에 존재하는 bottom half 구현 mechanism에 대해 얘기하겠다.

    The Original "Bottom Half"
        초기에 Linux에서는 bottom halves 구현을 위해 "bottom half"만을 제공했다.
        BH라고도 알려져있다. 이제 BH로 부르겠다.
        BH는 간단하다. 전체 system에서 32 bottom halves가 BH로 statically create되어있다.
        top half는 bottom half가 실행될 것인지 a bit in 32-bit integer로 setting할 수 있다.
        각각의 BH는 globally synchronized되어있다. 2개의 BH가 다른 processor에서라도 같이 실행될 수 없다.
        BH는 사용하기 쉽지만 inflexible하다.

    Task Queues
        BH를 대체하기 위해 만들어졌다. kernel defined a family of queues.
        각각의 queue에는 function의 linked list가 들어있다.
        queue에 들어있는 function은 어떤 queue에 들어있느냐에 따라 특정 시간에 실행된다.
        driver는 그들의 bottom halves를 적절한 queue에 등록할 수 있다. 
        fair하게 동작하지만 BH 전체를 대체하기에는 아직 inflexible하다.

    Softirqs and Tasklets
        2.3 development series에서 softirqs, tasklets가 소개되었다.
        이미 존재하는 driver에 대한 호환성을 제외하고는 softirqs와 tasklets가 BH를 완벽히 대체할 수 있다.
        Softirqs :
            statically define된 bottom halves의 set이다.
            bottom halves는 어느 processor에서든 동시에 실행할 수 있다.
            같은 type의 2가지라도 동시에 실행 가능하다.
            networking같이 performance critical할 때 좋다. 
            그러나 2개의 같은 softirq가 동시에 실행될 수 있기 때문에 softirqs를 사용할 땐 주의가 필요하다.
            게다가 softirq는 compile time에 statically 등록되어야 한다.
        Tasklets :
            softirqs 기반으로 만들어져있다.
            flexible하고 dynamically created bottom halves의 set이다.
            2개의 서로 다른 tasklets은 동시에 다른 processor에서 실행가능하다. 그러나 같은 type의 tasklet은
             동시에 실행될 수 없다.
            그러므로 tasklets은 performance와 ease of use의 좋은 trade-off이다. 
            대부분의 bottom-half processing에서는 tasklet으로 충분하다.
            code can dynamically register tasklets.

    2.5 kernel developing동안에 BH interface는 모든 BH user들이 다른 bottom-half interface로 바꾸면서
    없어졌다. task queue interface는 work queue interface로 바뀌었는데 
    work queue는 queueing work를 나중에 process context에서 실행되게하는 간단하지만 유용한 방법이다. 
    결과적으로 2.6에서는 softirqs, tasklets, work queues가 남았다. 
