Softirqs
    Softirq는 직접 사용되지 않고 tasklet을 통해 사용된다.
    * tasklet은 softirq를 바탕으로 만들어졌다.


Implementing Softirqs
    Softirq는 compile time에 statically 할당된다. ( dynamic하게 삭제 등록 불가 )
    softirq_action structure으로 표현된다.

    struct softirq_action{
        void (*action) (struct softirq_action *);
    };

    /* 32-entry array of this structure */
    static struct softirq_action softirq_vec[NR_SOFTIRQS];

    NR_SOFTIRQS는 등록된 softirq의 갯수를 나타낸다.
    NR_SOFTIRQS는 compile time에 정해지므로 변함이 없다.
    kernel이 softirq의 갯수를 32개로 제한을 주었지만 현재의 kernel에는 9개만 남아있다.

    The Softirq Handler
        /* softirq handler, action */
        void softirq_handler(struct softirq_action *)

        softirq_action struct 안에 있는 함수이다.
        만약 my_softirq의 handler를 실행시킬 때, my_softirq->action(my_softirq) 로 호출하면 된다.
        softirq_action struct를 전부 넘겨줌으로써 나중에 structure가 바뀌더라도 handler는 수정하지 않아도 된다.

        softirq는 절대 다른 softirq를 preempt하지 않는다. softirq는 interrupt handler에 의해서만 preempt된다.
        하지만 다른 processor에서는 다른 softirq가 실행될 수 있다.( 같은 softirq도 실행 가능 )

    Executing Softirqs
        softirq는 실행되기 전에 mark를 해야 한다. 이것을 raising the softirq라고 한다.
        보통 interrupt handler가 return 하기 전에 mark를 한다.

        밑의 3가지 상황에서 기다리는 softirq가 있는지 확인하고 실행한다.
            1. in the return from hardware interrupt code path
            2. in the ksoftirqd kernel thread
            3. in any code that explicitly checks for and executes pending softirqs,
                such as the networking subsystem

        어떤 방법으로 softirq가 실행되든지, softirq는 do_softirq() -> __do_softirq()를 통해 실행된다.

        __do_softirq() :
            1. local_softirq_pending() macro를 통해 pending local variable에 32-bit mask를 저장한다.
                pending softirq에 대해 1로 set.
            2. set_softirq_pending()
                pending bitmask of softirq를 pending에 저장했기 때문에 실제 bitmask를 clear해준다.
            3. pointer h에 softirq_vec의 첫번째 요소를 넣어준다.
            4. pending의 첫번째 bit가 set되어있다면, softirq handler h->action(h)를 호출한다.
            5. h++
                softirq_vec의 다음 요소를 가리킨다.
            6. pending >>= 1
                1만큼 right shift해서 2번째 bit를 첫번째 bit에 놓는다.
            7. repeat the previous step.
            8. repeat until pending is zero -> pending이 0이라는 것은 더이상 pending softirq가 없다는 뜻이다.
                h가 valid entry를 가리키고 있는지에 대한 check도 가능하다.
                -> pending이 최대 32bit이고 softirq_vec 또한 32개이기 때문에


Using Softirqs
    Softirq는 시스템의 timing-critical하고 important한 bottom-half processing에 쓰인다.
    현재 networking and block devices에서만 softirq를 직접 사용한다.
    kernel timer, tasklets도 softirq를 바탕으로 만들어졌다.
    새로운 softirq를 추가할 때는 tasklet을 고려해봐야 한다. tasklet은 dynamic하게 만들고 locking requirement가
     약하기 때문에 더 사용하기 쉽다. 그럼에도 불구하고 timimg-critical한 application이라면 softirq를 써라.

    Assigning an Index
        softirq는 compile time에 static하게 enum을 통해 선언되어있다. kernel은 그 index를 이용한다.
        index는 0부터 시작해서 작을수록 우선순위가 높다.

        새로운 softirq를 만들때, 이 enum에도 넣어주어야 한다. 그저 enum의 맨 끝에 넣어주는 것이 아니라 priority에 따라
        넣어주어야한다. HI_SOFTIRQ는 항상 첫번째, RCU_SOFTIRQ는 항상 마지막에 있어야한다. 새로운 softirq는 그 사이에 
        넣어주면 된다.

    Registering Your Handler
        softirq handler는 run time에 open_softirq(softirq's index, its handler function) 를 통해 등록된다. 
        softirq handler가 실행될 때 interrupt는 허용되지만 sleep은 할 수 없다.
        한 softirq handler가 실행 중일 때, 다른 processor에서도 이 softirq handler가 실행될 수 있다.
        따라서 softirq가 사용하는 shared data에 대한 적절한 locking이 필요하다. 이것 때문에 tasklet이 더 많이 선호된다.
        간단히 softirq가 동시에 실행되는 것을 막는 것은 이상적이지 않다. 
        결론적으로 대부분의 softirq handler는 per-processor dta를 가진다. processor마다 unique하고 locking을 필요로
        하지 않는다. 명시적인 locking을 피하면서 훌륭한 scalability를 제공한다.
        softirq를 쓰는 이유는 scalability이다. 많은 processor로 scale할 이유가 없다면 그냥 tasklet을 써라.
        tasklet은 같은 softirq handler를 동시에 서로 다른 processor에서 실행할 수 없는 softirq이다.

    Raising Your Softirq
        To mark it pending, call raise_softirq()
        rais_softirq() :
            이 함수가 호출되고 softirq를 raise하기 전까지 interrupt가 disable되어야 한다.
            -> call rais_softirq_irqoff()
            만약 이미 interrupts가 off되어있다면 저 함수를 호출할 필요가 없다 -> small optimization

        softirq는 보통 interrupt handler안에서 raise된다. interrupt handler가 실행 중일 때, kernel은
        do_softirq()를 실행시킨다. 여기서 interrupt handler가 끝난 softirq가 실행된다.
