Tasklets
    Tasklets have nothing to do tasks.
    Tasklets are similar in nature and behavior to softirqs.
    however they have a simpler interface and relaxed locking rules.

    tasklet을 사용할지 softirq를 사용할지 고민할 때 보통의 경우 거의 tasklet이 맞다.
    softirq는 high frequency and highly threaded uses에서만 필요하다.
    tasklet이 대부분의 경우에서 잘 작동하고 사용하기도 쉽다.


Implementing Tasklets
    tasklets are softirqs
    tasklets은 HI_SOFTIRQ 와 TASKLET_SOFTIRQ로 표현된다. 
    HI_SOFTIRQ가 TASKLET_SOFTIRQ보다 먼저 실행된다.

    The Tasklet Structure
        tasklet_struct structure로 표현된다.

        struct tasklet_struct {
            struct tasklet_struct *next;        /* next tasklet in the list */
            unsigned long state;                /* state of the tasklet */
            atomic_t count;                     /* reference counter */
            void (*func) (unsigned long);       /* tasklet handler function */
            unsigned long data;                 /* argument to the tasklet function */
        };

        func member     : tasklet handler를 나타낸다.(softirq의 action과 같다.)
        state member    :
            zero                    - 
            TASKLET_STATE_SCHED     - tasklet이 실행되기 위해 scheduling된 상태
            TASKLET_STATE_RUN       - tasklet이 실행 중인 상태
                                      multiprocessor system에서만 사용한다. uniprocessor에서는 실행 중인지 알 수 있다.
        count member    : reference count, 0이 아니면 tasklet은 disable이고 실행될 수 없다.
                          0이 라면 enable이고 만약 mark되어있다면 실행될 수 있다.

    Scheduling Tasklets
        scheduled tasklets는 per-processor structure가 2개씩 저장된다.
        tasklet_vec     : linked list for regular tasklets( TASKLET_SOFTIRQ 사용 )
                          tasklet_schedule() -> __tasklet_schedule()
        tasklet_hi_vec  : linked list for high-priority tasklets( HI_SOFTIRQ 사용 )
                          tasklet_hi_schedule() -> __tasklet_hi_schedule()

        tasklet_schedule(), tasklet_hi_schedule()은 tasklet_struct의 pointer를 받아서
         해당 tasklet이 아직 scheduling이 안되었다면 __tasklet_schedule(), __tasklet_hi_schedule()을 호출
        __tasklet_schedule(), __tasklet_hi_schedule() 이 둘은 비슷하다.

        tasklet_schedule() :
            1. argument로 넘어온 tasklet의 state가 TASKLET_STATE_SCHED인지 확인한다. TASKLET_STATE_SCHED라면
                즉시 return한다.
            2. __tasklet_schedule()을 호출한다.
            3. interrupt system의 state를 저장하고 local interrupts를 disable한다.
                이 processor에서 tasklet_schedule()이 tasklets를 조작하는 동안 다른 것들이 어지럽히지 않게 한다.
            4. tasklet을 tasklet_vec이나 tasklet_hi_vec linked list의 head에 넣는다.
                * tasklet_vec, tasklet_hi_vec은 processor마다 unique하다.
            5. TASKLET_SOFTIRQ나 HI_SOFRIRQ sorfirq를 raise하고 do_softirq()를 통해 이 tasklet을 실행한다.
            6. interrupt system의 상태를 restore하고 return한다.

        대부분의 tasklet과 softirq는 interrupt handler가 끝나고 pending mark가 되기 때문에, 
         the last interrupt가 return하고 나서 do_softirq()가 실행된다.

        TASKLET_SOFTIRQ나 HI_SOFRIRQ가 raise되었기 때문에 do_softirq()에 의해 관련된 handler들이 실행된다.
        handler : tasklet_action(), tasklet_hi_action()이 대부분의 taslet processing을 한다.
            1. local interrupt delivery를 disable한다. 
                * 이 상황에서는 interrupt state를 저장할 필요가 없다. 항상 softirq handler로써 호출되기 때문에,
                   이 때에 interrupt는 항상 enable되어있다.
               해당 processor의 tasklet_vec이나 tasklet_hi_vec을 가져온다.
            2. 해당 processor의 list( tasklet_vec이나 tasklet_hi_vec )를 NULL로 clear한다.
            3. local interrupt delivery를 enalbe한다. 1번에서와의 같은 이유로 restore할 필요없다.
            4. 가져온 list에서 pending tasklet을 찾아 loop를 돈다.
            5. 만약 multiprocessing machine이라면 TASKLET_STATE_RUN flag를 확인해서 
                tasklet이 현재 다른 processor에서 실행중인지 확인한다.
                현재 실행 중이라면 skip하고 다음 pending tasklet으로 넘어간다.
            6. 현재 실행 중이 아니라면 TASKLET_STATE_RUN을 set해서 다른 processor에서 실행되는 것을 막는다.
            7. count value가 0인지 확인한다. 0이 아니라면 disable이므로 다음 tasklet으로 넘어간다.
            8. Run tasklet handler.
            9. tasklet을 실행하고 나서 TASKLET_STATE_RUN flag를 clear한다.
            10. Repeat for the next pending tasklet, until no more scheduled tasklets.


Using Tasklets
    Declaring Your Tasklet
        tasklet은 dynamic or static하게 생성할 수 있다.
        static하게 생성할 때는 아래 2개의 macro를 활용할 수 있다.
            DECLARE_TASKLET(name, func, data);
            DECLARE_TASKLET_DISABLED(name, func, data);
            -> 2개의 macro 모두 static하게 주어진 name으로 tasklet_struct를 만든다.
                tasklet이 schedule되면, func이 실행되고 data가 argument로 넘어간다. 
                2개의 macro의 차이는 초기 reference count가 다르다.
                -> DECLARE_TASKLET은 count를 0으로, DECLARE_TASKLET_DISABLED은 1로 한다.
                ex) DECLARE_TASKLET(my_tasklet, my_tasklet_handler, dev);
                        -> struct tasklet_struct my_tasklet = { NULL, 0, ATOMIC_INIT(0),
                                                                my_tasklet_handler, dev };

        dynamic하게 생선된 struct tasklet_struct t에 대한 tasklet을 initialize하기 위해,
         tasklet_init()을 호출한다.
        tasklet_init(t, tasklet_handler, dev);

    Writing Your Tasklet Handler
        task handler는 반드시 밑의 prototype을 지켜야 한다.
            void tasklet_handler(unsigned long data)
        tasklet은 softirq처럼 sleep할 수 없다. 따라서 semaphore나 다른 blocking function을 쓸 수 없다.
        tasklet은 모든 interrupt를 enable하고 실행되기 때문에 만약 tasklet이 interrupt handler와
         data를 공유한다면 interrupt disable이나 lock같은 precaution이 필요하다.
        softirq와 달리, tasklet은 같은 tasklet이 동시에 실행될 수 없다. 만약 다른 tasklet이나 softirq와
         data를 공유한다면 적절한 locking을 사용해야 한다.

    Scheduling Your Tasklet
        tasklet을 schedule하기 위해, tasklet_schedule()을 호출한다.
            tasklet_schedule(&my_tasklet);
        schedule된 tasklet은 빠른 시일 내에 실행된다. 만약 이미 schedule된 tasklet을 다시 schedule해도,
         한번만 실행된다. 또 해당 tasklet이 이미 실행 중이라면, 다시 schedule되고 다시 실행된다.
        optimization으로써, tasklet은 processor의 cache를 활용하기 위해 schedule된 processor에서 실행된다. 

        tasklet_disable()을 통해 tasklet을 disable할 수 있다. 현재 tasklet이 실행 중이라면 그것이 끝날 때까지
        기다렸다가 return된다. 대신 tasklet_disable_nosync()로 하면, tasklet이 실행 중이더라도 그것을 기다리지 않고
        disable시킨다. 그러나 이 함수는 보통 not safe하다.
        tasklet_enable()을 통해 tasklet을 enable할 수 있다.                                         //
        tasklet_kill()을 통해 pending queue에서 tasklet을 없앨 수 있다. tasklet_struct의 pointer를 받는다.
        queue에서 scheduled tasklet을 없애는 일은 tasklet이 종종 reschedule되는 일을 처리하는데 유용하다.


ksoftirqd
    Softirq processing은 per-processor kernel threads의 set이 한다. 이 kernel thread들이 
     system이 softirq로 뒤덮였을 때 도움을 준다.
    앞서 얘기했듯이, kernel은 softirq를 대부분의 경우 interrupt halder가 return했을 때 실행하지만 여러 경우에 실행한다.
    softirq는 high rate로 raise될수도 있고 게다가 자기자신을 다시 activate시킬 수 있다.
    softirq가 high frequency를 가질 가능성과 그들 자신을 remark할 수 있다는 점 때문에 
     user-space program들이 processor-time을 못 받을 수 있다.
    다시 실행되는 softirq를 시간에 따라 실행되지 못하게 하는건 받아들일 수 없다.

    First solution :
        들어온 softirq에 대한 작업을 수행하고 return하기 전에 아직 pending softirq가 있는지 확인하고 다시 실행하는 방법이다.
        이 방법은 kernel이 timely manner로 softirq를 실행하고 다시 activate된 softirq 또한 즉시 실행할 수 있다.

        하지만 softirq가 자주 발생하는 high load environment에서는 softirq를 계속 reactivate하는 문제가 있다.
        kernel이 다른 일은 수행하지 않고 계속 softirq를 실행하게 된다. 

        이 방법은 큰 load를 수행할 일이 없는 system에서는 잘 작동할 것이다. 
        적당한 interrupt level를 가진 system에서 이 solution은 받아들여지지 않는다.                        //
        User-space는 중요한 시기에 starve할 수 없다.

    Second solution :
        reactivated softirq들을 handle하지 않는 방법이다.
        pending softirq를 실행하고 나서 만약 reactivate된 softirq가 있더라도 실행하지 않는다.
        kernel이 pending softirq를 다시 handle할 때까지 실행되지 않는다.
        -> 다음 interrupt가 발생할 때까지 실행되지 않는다는 말과 거의 같다.
        -> 새로운(reactivated) softirq가 발생하기 전 아주 긴 시간동안 실행되지 않을 수 있다.

        더 큰 문제는 idle system에서는 softirq를 바로 실행하는 것이 더 유리하다. 하지만 이 방법으로는
        어떤 process가 runnable인지 모른다. 그러므도 이 방법이 user-space의 starving을 막지만
        softirq를 starve하게 하고 idle system에서는 좋은 점이 없다.

    The solution : 
        reactivated process를 즉시 실행하지는 않는다. 대신 softirq의 숫자가 지나치게 커진다면,
        kernel이 load를 handling하는 kernel thread들을 깨운다. 깨워진 kernel thread들은 다른 중요한 process 대신 
        실행되는 것을 막기 위해 low priority(nice value 19)로 실행된다. 이러한 양보가 heavy softirq activity가
        user-space의 starving을 야기하는 것을 막고, 반대로 많은 softirq가 결국 실행되게 한다.
        idle system에서는 kernel thread가 즉시 schedule될 것이기 때문에 다소 빨리 softirq가 handle될 것이다.

        processor당 한 개의 thread를 갖는다. 이 thread들은 ksoftirqd/n 이라는 이름을 가진다. 여기서 n은 processor number이다.
        각 processor마다 한 개의 thread를 가짐으로써 idle processor에서는 softirq를 항상 service할 수 있다.

        ksoftirqd는 pending softirq가 있다면 do_softirq()를 호출하고 handle한다.
        iteration마다 schedule()를 호출해서 더 중요한 process를 실행시킨다.
        ksoftirqd는 do_softirq()가 reactivating하는 kernel thread를 감지할때마다 깨어난다.


The Old BH Mechanism
    BH는 statci하게 define되어야 하고 최대 32개만 가질 수 있다.
    이러한 static requirement와 최대 32개의 bottom halves는 사용의 주요 장애가 되었다.

    모든 BH handler는 동시에 실행될 수 없다. 이러한 특징은 synchronization을 쉽게 만들지만, multiprocessor에서는
    좋지 않다.
    BH interface는 multiprocessor에서 scale이 잘 되지 않는다.

    BH mechanism은 tasklet과 비슷하다. 사실 2.4에서는 tasklet을 바탕으로 BH interface를 만들었다.
    To mark a BH as pending, mark_bh() was called.
    bh_action()이 BH tasklet을 실행하기 위해 scheduling한다.
